#include <ESP32Servo.h>
#include <BluetoothSerial.h>

// 定义舵机和 LED 引脚
#define NUM_SERVOS 6 // 6 个舵机
const int servoPins[NUM_SERVOS] = {23, 22, 19, 18, 35}; // 6 个舵机的引脚
const int ledPins[] = {12, 14, 15}; // 6 个 LED 的引脚

Servo servos[NUM_SERVOS]; // 舵机对象数组
BluetoothSerial SerialBT;
bool isConnected = false; // 是否连接到 Android 设备
unsigned long lastCommandTime = 0; // 上次收到指令的时间
const unsigned long standbyTimeout = 5000; // 5 秒无指令进入待机状态

void setup() {
  // 初始化串口
  Serial.begin(115200);
  SerialBT.begin("ESP32_Robot"); // 蓝牙设备名称

  // 初始化舵机
  for (int i = 0; i < NUM_SERVOS; i++) {
    servos[i].setPeriodHertz(50); // 设置 PWM 频率为 50Hz
    servos[i].attach(servoPins[i], 500, 2400); // 绑定舵机到引脚
  }

  // // 初始化 LED 引脚
  // for (int i = 0; i < 6; i++) {
  //   pinMode(ledPins[i], OUTPUT);
  //   digitalWrite(ledPins[i], LOW); // 初始关闭 LED
  // }

  Serial.println("ESP32 Ready");
}

void loop() {

  // 检查蓝牙连接状态
  if (SerialBT.connected()) {
    if (!isConnected) {
      isConnected = true;
      Serial.println("Connected to Android");
    }
    lastCommandTime = millis(); // 更新上次收到指令的时间
  } else {
    if (isConnected) {
      isConnected = false;
      Serial.println("Disconnected from Android");
    }
  }

  // 如果未连接或超时未收到指令，进入待机状态
  if (!isConnected || millis() - lastCommandTime > standbyTimeout) {
    standbyMode(); // 待机状态
  } else {
    // 运行状态：处理 Android 指令
    if (SerialBT.available()) {
      String command = SerialBT.readStringUntil('\n');
      command.trim(); // 去除换行符和空格

      // 处理指令
      if (command == "FORWARD") {
        moveServos(180); // 前进
      } else if (command == "BACKWARD") {
        moveServos(0); // 后退
      } else if (command.startsWith("LED")) {
        int ledIndex = command.charAt(3) - '0'; // 获取 LED 编号
        if (ledIndex >= 0 && ledIndex < 6) {
          toggleLED(ledIndex); // 切换 LED 状态
        }
      }
    }
  }


}

// 控制所有舵机
void moveServos(int angle) {
  for (int i = 0; i < NUM_SERVOS; i++) {
    servos[i].write(angle); // 设置舵机角度
  }
  delay(500); // 等待舵机完成动作
}

// 切换 LED 状态
void toggleLED(int index) {
  digitalWrite(ledPins[index], !digitalRead(ledPins[index]));
}

// 待机状态：随机移动舵机和闪烁 LED
void standbyMode() {
  Serial.println("Standby mode: Random movement and LED blinking");

  // 随机移动舵机
  for (int i = 0; i < NUM_SERVOS; i++) {
    int randomAngle = random(0, 181); // 生成 0 到 180 的随机角度
    randomAngle = 320;
    servos[i].write(randomAngle); // 设置舵机角度
  }

  // 随机闪烁 LED
  for (int i = 0; i < 6; i++) {
    if (random(0, 2) == 1) { // 随机决定是否点亮 LED
      digitalWrite(ledPins[i], HIGH);
    } else {
      digitalWrite(ledPins[i], LOW);
    }
  }

  delay(1000); // 等待 1 秒
}